{"ast":null,"code":"// client/src/utils/auth.js\nimport jwtDecode from 'jwt-decode';\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};\nexport const isAuthenticated = () => {\n  const token = getToken();\n  if (!token) return false;\n  try {\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n      localStorage.removeItem('token');\n      return false;\n    }\n    return true;\n  } catch (error) {\n    console.error('Token verification failed', error);\n    return false;\n  }\n};","map":{"version":3,"names":["jwtDecode","getToken","localStorage","getItem","isAuthenticated","token","decoded","currentTime","Date","now","exp","removeItem","error","console"],"sources":["C:/Users/User/Documents/Github backup/nft-nexus-local-ver/client/src/utils/auth.js"],"sourcesContent":["// client/src/utils/auth.js\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport const getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  const token = getToken();\r\n  if (!token) return false;\r\n\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000;\r\n    if (decoded.exp < currentTime) {\r\n      localStorage.removeItem('token');\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Token verification failed', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,YAAY;AAElC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGJ,QAAQ,CAAC,CAAC;EACxB,IAAI,CAACI,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMC,OAAO,GAAGN,SAAS,CAACK,KAAK,CAAC;IAChC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,IAAIH,OAAO,CAACI,GAAG,GAAGH,WAAW,EAAE;MAC7BL,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}