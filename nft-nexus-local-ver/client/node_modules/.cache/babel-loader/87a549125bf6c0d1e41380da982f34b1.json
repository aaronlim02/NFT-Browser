{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\NFT-Browser\\\\nft-nexus-local-ver\\\\client\\\\src\\\\components\\\\wallet-explorer-components\\\\NFTDisplayGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Results = ({\n  content\n}) => {\n  _s();\n  const [images, setImages] = useState([]);\n  const getWorkingIpfsUrl = async cid => {\n    const gateways = [`https://ipfs.io/ipfs/${cid}`, `https://cloudflare-ipfs.com/ipfs/${cid}`, `https://gateway.pinata.cloud/ipfs/${cid}`];\n    for (const gateway of gateways) {\n      const isWorking = await testImageUrl(gateway);\n      if (isWorking) {\n        return gateway;\n      }\n    }\n    return null;\n  };\n  useEffect(() => {\n    const fetchImages = async () => {\n      if (content) {\n        const output = content[\"output\"];\n        const imagesWithUrls = await Promise.all(output.map(async item => {\n          const cid = item[2].split('/').pop(); // Extract CID from the URL\n          const workingUrl = await getWorkingIpfsUrl(cid);\n          return {\n            ...item,\n            workingUrl\n          };\n        }));\n        setImages(imagesWithUrls);\n      }\n    };\n    fetchImages();\n  }, [content]);\n  if (content === null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"null\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  } else {\n    try {\n      var output = content[\"output\"];\n      console.log(output);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: output.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"image-container\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.workingUrl || item[2],\n              alt: item[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item[0] ? item[0] : \"<null>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: item[3],\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"View Metadata\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    } catch {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this);\n    }\n  }\n};\n_s(Results, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n_c = Results;\nexport default Results;\nvar _c;\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Results","content","_s","images","setImages","getWorkingIpfsUrl","cid","gateways","gateway","isWorking","testImageUrl","fetchImages","output","imagesWithUrls","Promise","all","map","item","split","pop","workingUrl","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","className","index","id","src","alt","href","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/NFT-Browser/nft-nexus-local-ver/client/src/components/wallet-explorer-components/NFTDisplayGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Results = ({ content }) => {\r\n  const [images, setImages] = useState([]);\r\n\r\n  const getWorkingIpfsUrl = async (cid) => {\r\n    const gateways = [\r\n      `https://ipfs.io/ipfs/${cid}`,\r\n      `https://cloudflare-ipfs.com/ipfs/${cid}`,\r\n      `https://gateway.pinata.cloud/ipfs/${cid}`\r\n    ];\r\n  \r\n    for (const gateway of gateways) {\r\n      const isWorking = await testImageUrl(gateway);\r\n      if (isWorking) {\r\n        return gateway;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      if (content) {\r\n        const output = content[\"output\"];\r\n        const imagesWithUrls = await Promise.all(\r\n          output.map(async (item) => {\r\n            const cid = item[2].split('/').pop(); // Extract CID from the URL\r\n            const workingUrl = await getWorkingIpfsUrl(cid);\r\n            return { ...item, workingUrl };\r\n          })\r\n        );\r\n        setImages(imagesWithUrls);\r\n      }\r\n    };\r\n\r\n    fetchImages();\r\n  }, [content]);\r\n\r\n  if (content === null) {\r\n    return (\r\n      <p>null</p>\r\n    )\r\n  } else {\r\n    try {\r\n      var output = content[\"output\"];\r\n      console.log(output)\r\n      return (\r\n        <div className=\"grid-container\">\r\n          {output.map((item, index) => (\r\n            <div className=\"grid-item\" key={index}>\r\n              <div id=\"image-container\">\r\n                <img src={item.workingUrl || item[2]} alt={item[0]} />\r\n              </div>\r\n              <h3>{item[0] ? item[0] : \"<null>\"}</h3>\r\n              <p>{item[1]}</p>\r\n              <a href={item[3]} target=\"_blank\" rel=\"noopener noreferrer\">View Metadata</a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } catch {\r\n      return (\r\n        <p>error</p>\r\n      )\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport default Results;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}